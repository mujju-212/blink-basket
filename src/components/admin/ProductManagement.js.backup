import React, { useState, useEffect } from 'react';
import { Card  const loadData = () => {
    console.log('🔍 ProductManagement - Loading data...');
    console.log('📦 CONSTANTS_PRODUCTS has:', CONSTANTS_PRODUCTS.length, 'products');
    
    const productsData = productService.getAllProducts();
    const categoriesData = productService.getAllCategories();
    console.log('📦 Products from service:', productsData.length, 'products');
    console.log('📂 Categories from service:', categoriesData.length, 'categories');
    console.log('📋 First few products:', productsData.slice(0, 5).map(p => ({ id: p.id, name: p.name, category: p.category })));
    
    // Force use constants if service returns empty or few products
    const finalProducts = productsData.length < 50 ? CONSTANTS_PRODUCTS : productsData;
    console.log('✅ Using products:', finalProducts.length, finalProducts === CONSTANTS_PRODUCTS ? '(from constants)' : '(from service)');
    
    setProducts(finalProducts);
    setCategories(categoriesData);
    console.log('✅ State updated with products');
  };ton, Modal, Form, Alert, Badge, InputGroup, Row, Col, Dropdown, Pagination } from 'react-bootstrap';
import productService from '../../services/productService';
import { PRODUCTS as CONSTANTS_PRODUCTS } from '../../utils/constants';

const ProductManagement = () => {
  const [products, setProducts] = useState(CONSTANTS_PRODUCTS); // Force initial load from constants
  const [filteredProducts, setFilteredProducts] = useState(CONSTANTS_PRODUCTS);
  const [paginatedProducts, setPaginatedProducts] = useState(CONSTANTS_PRODUCTS.slice(0, 10));
  const [categories, setCategories] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [deletingProduct, setDeletingProduct] = useState(null);
  
  // Search and Filter State
  const [searchTerm, setSearchTerm] = useState('');
  const [filterCategory, setFilterCategory] = useState('all');
  const [filterStock, setFilterStock] = useState('all'); // all, inStock, lowStock, outOfStock
  const [priceRange, setPriceRange] = useState({ min: '', max: '' });
  
  // Sorting State
  const [sortBy, setSortBy] = useState('name'); // name, price, stock, category
  const [sortOrder, setSortOrder] = useState('asc'); // asc, desc
  
  // Pagination State
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(10);
  
  const [formData, setFormData] = useState({
    name: '',
    category: '',
    price: '',
    originalPrice: '',
    size: '',
    stock: '',
    image: '',
    description: ''
  });
  const [loading, setLoading] = useState(false);
  const [alert, setAlert] = useState({ show: false, message: '', type: 'success' });

  useEffect(() => {
    console.log('🔍 ProductManagement mounting...');
    
    // Immediate debug check
    const storedProducts = localStorage.getItem('products');
    const storedCount = storedProducts ? JSON.parse(storedProducts).length : 0;
    console.log('📊 LocalStorage products count:', storedCount);
    
    // Check import directly
    import('../utils/constants').then(constants => {
      console.log('📦 Constants PRODUCTS length:', constants.PRODUCTS.length);
      console.log('📋 First 3 products from constants:', constants.PRODUCTS.slice(0, 3).map(p => ({ id: p.id, name: p.name })));
    });
    
    loadData();
  }, []);

  useEffect(() => {
    filterAndSortProducts();
  }, [products, searchTerm, filterCategory, filterStock, priceRange, sortBy, sortOrder]);

  useEffect(() => {
    paginateProducts();
  }, [filteredProducts, currentPage]);

  const loadData = () => {
    const productsData = productService.getAllProducts();
    const categoriesData = productService.getAllCategories();
    console.log('🔍 ProductManagement - Loading data...');
    console.log('📦 Products from service:', productsData.length, 'products');
    console.log('📂 Categories from service:', categoriesData.length, 'categories');
    console.log('� First few products:', productsData.slice(0, 5).map(p => ({ id: p.id, name: p.name, category: p.category })));
    
    setProducts(productsData);
    setCategories(categoriesData);
    console.log('✅ State updated with products');
  };

  const filterAndSortProducts = () => {
    console.log('🔍 Filtering products...', { 
      totalProducts: products.length, 
      searchTerm, 
      filterCategory, 
      filterStock,
      priceRange 
    });
    
    let filtered = [...products];

    // Search filter
    if (searchTerm) {
      filtered = filtered.filter(product =>
        product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        product.category.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (product.description && product.description.toLowerCase().includes(searchTerm.toLowerCase()))
      );
    }

    // Category filter
    if (filterCategory !== 'all') {
      filtered = filtered.filter(product => product.category === filterCategory);
    }

    // Stock filter
    if (filterStock !== 'all') {
      filtered = filtered.filter(product => {
        switch (filterStock) {
          case 'inStock': return product.stock > 5;
          case 'lowStock': return product.stock > 0 && product.stock <= 5;
          case 'outOfStock': return product.stock === 0;
          default: return true;
        }
      });
    }

    // Price range filter
    if (priceRange.min !== '') {
      filtered = filtered.filter(product => product.price >= parseFloat(priceRange.min));
    }
    if (priceRange.max !== '') {
      filtered = filtered.filter(product => product.price <= parseFloat(priceRange.max));
    }

    // Sorting
    filtered.sort((a, b) => {
      let aValue, bValue;
      
      switch (sortBy) {
        case 'name':
          aValue = a.name.toLowerCase();
          bValue = b.name.toLowerCase();
          break;
        case 'price':
          aValue = a.price;
          bValue = b.price;
          break;
        case 'stock':
          aValue = a.stock;
          bValue = b.stock;
          break;
        case 'category':
          aValue = a.category.toLowerCase();
          bValue = b.category.toLowerCase();
          break;
        default:
          return 0;
      }

      if (sortOrder === 'asc') {
        return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;
      } else {
        return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;
      }
    });

    console.log('✅ Filtered products:', filtered.length, 'products');
    setFilteredProducts(filtered);
    setCurrentPage(1); // Reset to first page when filters change
  };

  const paginateProducts = () => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    setPaginatedProducts(filteredProducts.slice(startIndex, endIndex));
  };

  const showAlert = (message, type = 'success') => {
    setAlert({ show: true, message, type });
    setTimeout(() => setAlert({ show: false, message: '', type: 'success' }), 3000);
  };

  const clearAllFilters = () => {
    setSearchTerm('');
    setFilterCategory('all');
    setFilterStock('all');
    setPriceRange({ min: '', max: '' });
    setSortBy('name');
    setSortOrder('asc');
  };

  const handleSort = (field) => {
    if (sortBy === field) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
    } else {
      setSortBy(field);
      setSortOrder('asc');
    }
  };

  const getSortIcon = (field) => {
    if (sortBy !== field) return <i className="fas fa-sort text-muted"></i>;
    return sortOrder === 'asc' 
      ? <i className="fas fa-sort-up text-primary"></i>
      : <i className="fas fa-sort-down text-primary"></i>;
  };

  const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);

  const handleAdd = () => {
    setEditingProduct(null);
    setFormData({
      name: '',
      category: categories[0]?.name || '',
      price: '',
      originalPrice: '',
      size: '',
      stock: '',
      image: '',
      description: ''
    });
    setShowModal(true);
  };

  const handleEdit = (product) => {
    setEditingProduct(product);
    setFormData({
      name: product.name,
      category: product.category,
      price: product.price.toString(),
      originalPrice: product.originalPrice?.toString() || '',
      size: product.size,
      stock: product.stock.toString(),
      image: product.image,
      description: product.description || ''
    });
    setShowModal(true);
  };

  const handleDelete = (product) => {
    setDeletingProduct(product);
    setShowDeleteModal(true);
  };

  const confirmDelete = async () => {
    if (!deletingProduct) return;

    setLoading(true);
    try {
      await productService.deleteProduct(deletingProduct.id);
      setProducts(prev => prev.filter(p => p.id !== deletingProduct.id));
      setShowDeleteModal(false);
      setDeletingProduct(null);
      
      // Show success message
      setMessage({
        type: 'success',
        text: `Product "${deletingProduct.name}" deleted successfully!`
      });
      
      setTimeout(() => setMessage(null), 3000);
    } catch (error) {
      console.error('Error deleting product:', error);
      setMessage({
        type: 'error',
        text: 'Failed to delete product. Please try again.'
      });
      setTimeout(() => setMessage(null), 5000);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      const productData = {
        ...formData,
        price: parseFloat(formData.price),
        originalPrice: formData.originalPrice ? parseFloat(formData.originalPrice) : null,
        stock: parseInt(formData.stock)
      };

      if (editingProduct) {
        productService.updateProduct(editingProduct.id, productData);
        showAlert('Product updated successfully!');
      } else {
        productService.addProduct(productData);
        showAlert('Product added successfully!');
      }
      
      setShowModal(false);
      loadData();
    } catch (error) {
      showAlert('Error saving product', 'danger');
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const getStockStatus = (stock) => {
    if (stock === 0) return { text: 'Out of Stock', variant: 'danger' };
    if (stock <= 5) return { text: 'Low Stock', variant: 'warning' };
    return { text: 'In Stock', variant: 'success' };
  };

  return (
    <>
      <Card>
        <Card.Header>
          <div className="d-flex justify-content-between align-items-center mb-3">
            <h5 className="mb-0">
              Product Management 
              <Badge bg="info" className="ms-2">
                {filteredProducts.length} of {products.length} products
              </Badge>
            </h5>
            <div>
              <Button 
                variant="outline-success" 
                size="sm"
                onClick={async () => {
                  console.log('🧪 Direct constants test...');
                  const constants = await import('../utils/constants');
                  console.log('📦 Direct import PRODUCTS:', constants.PRODUCTS.length);
                  setProducts(constants.PRODUCTS);
                  console.log('✅ Set state directly from constants');
                }}
                className="me-2"
              >
                <i className="fas fa-flask me-1"></i>
                Direct Import ({products.length})
              </Button>
              <Button 
                variant="outline-info" 
                size="sm"
                onClick={() => {
                  const stored = localStorage.getItem('products');
                  const parsed = stored ? JSON.parse(stored) : null;
                  console.log('🔍 localStorage products:', parsed ? parsed.length : 'none');
                  console.log('📦 Current state products:', products.length);
                  console.log('🗂️ PRODUCTS constant from import:', productService.reloadFromConstants().length);
                  if (parsed && parsed.length > 0) {
                    console.log('📋 Sample products in localStorage:', parsed.slice(0, 3).map(p => ({ id: p.id, name: p.name })));
                  }
                }}
                className="me-2"
              >
                <i className="fas fa-bug me-1"></i>
                Debug
              </Button>
              <Button 
                variant="outline-warning" 
                size="sm"
                onClick={() => {
                  console.log('🔄 Resetting product data...');
                  const allProducts = productService.reloadFromConstants();
                  setProducts(allProducts);
                  console.log('✅ Reset complete! Loaded', allProducts.length, 'products');
                }}
                className="me-2"
              >
                <i className="fas fa-refresh me-1"></i>
                Reset Data ({products.length})
              </Button>
              <Button variant="primary" onClick={handleAdd}>
                <i className="fas fa-plus me-2"></i>
                Add Product
              </Button>
            </div>
          </div>
          
          {/* Search and Filters Row */}
          <Row className="g-3">
            {/* Search */}
            <Col md={3}>
              <InputGroup>
                <InputGroup.Text>
                  <i className="fas fa-search"></i>
                </InputGroup.Text>
                <Form.Control
                  type="text"
                  placeholder="Search products..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </InputGroup>
            </Col>
            
            {/* Category Filter */}
            <Col md={2}>
              <Form.Select
                value={filterCategory}
                onChange={(e) => setFilterCategory(e.target.value)}
              >
                <option value="all">All Categories</option>
                {categories.map(category => (
                  <option key={category.id} value={category.name}>
                    {category.name}
                  </option>
                ))}
              </Form.Select>
            </Col>
            
            {/* Stock Filter */}
            <Col md={2}>
              <Form.Select
                value={filterStock}
                onChange={(e) => setFilterStock(e.target.value)}
              >
                <option value="all">All Stock Levels</option>
                <option value="inStock">In Stock (5+)</option>
                <option value="lowStock">Low Stock (1-5)</option>
                <option value="outOfStock">Out of Stock</option>
              </Form.Select>
            </Col>
            
            {/* Price Range */}
            <Col md={2}>
              <InputGroup>
                <Form.Control
                  type="number"
                  placeholder="Min ₹"
                  value={priceRange.min}
                  onChange={(e) => setPriceRange({...priceRange, min: e.target.value})}
                />
                <Form.Control
                  type="number"
                  placeholder="Max ₹"
                  value={priceRange.max}
                  onChange={(e) => setPriceRange({...priceRange, max: e.target.value})}
                />
              </InputGroup>
            </Col>
            
            {/* Sort By */}
            <Col md={2}>
              <Form.Select
                value={`${sortBy}-${sortOrder}`}
                onChange={(e) => {
                  const [field, order] = e.target.value.split('-');
                  setSortBy(field);
                  setSortOrder(order);
                }}
              >
                <option value="name-asc">Name A-Z</option>
                <option value="name-desc">Name Z-A</option>
                <option value="price-asc">Price Low-High</option>
                <option value="price-desc">Price High-Low</option>
                <option value="stock-asc">Stock Low-High</option>
                <option value="stock-desc">Stock High-Low</option>
                <option value="category-asc">Category A-Z</option>
              </Form.Select>
            </Col>
            
            {/* Clear Filters */}
            <Col md={1}>
              <Button variant="outline-secondary" onClick={clearAllFilters} title="Clear all filters">
                <i className="fas fa-times"></i>
              </Button>
            </Col>
          </Row>
        </Card.Header>
        
        <Card.Body>
          {alert.show && (
            <Alert variant={alert.type} dismissible onClose={() => setAlert({ show: false, message: '', type: 'success' })}>
              {alert.message}
            </Alert>
          )}

          <Table responsive hover>
            <thead>
              <tr>
                <th>Image</th>
                <th 
                  style={{ cursor: 'pointer' }} 
                  onClick={() => handleSort('name')}
                  className="user-select-none"
                >
                  Product {getSortIcon('name')}
                </th>
                <th 
                  style={{ cursor: 'pointer' }} 
                  onClick={() => handleSort('category')}
                  className="user-select-none"
                >
                  Category {getSortIcon('category')}
                </th>
                <th 
                  style={{ cursor: 'pointer' }} 
                  onClick={() => handleSort('price')}
                  className="user-select-none"
                >
                  Price {getSortIcon('price')}
                </th>
                <th 
                  style={{ cursor: 'pointer' }} 
                  onClick={() => handleSort('stock')}
                  className="user-select-none"
                >
                  Stock {getSortIcon('stock')}
                </th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {paginatedProducts.map((product) => {
                const stockStatus = getStockStatus(product.stock);
                const discount = product.originalPrice 
                  ? Math.round(((product.originalPrice - product.price) / product.originalPrice) * 100)
                  : 0;

                return (
                  <tr key={product.id}>
                    <td>
                      <img
                        src={product.image}
                        alt={product.name}
                        className="rounded"
                        style={{ width: '50px', height: '50px', objectFit: 'cover' }}
                      />
                    </td>
                    <td>
                      <div>
                        <div className="fw-semibold">{product.name}</div>
                        <small className="text-muted">{product.size}</small>
                      </div>
                    </td>
                    <td>
                      <Badge bg="info">{product.category}</Badge>
                    </td>
                    <td>
                      <div>
                        <div className="fw-semibold text-success">₹{product.price}</div>
                        {product.originalPrice && (
                          <small className="text-muted text-decoration-line-through">
                            ₹{product.originalPrice}
                          </small>
                        )}
                        {discount > 0 && (
                          <Badge bg="success" className="ms-1 small">{discount}% OFF</Badge>
                        )}
                      </div>
                    </td>
                    <td>
                      <span className="fw-semibold">{product.stock}</span>
                    </td>
                    <td>
                      <Badge bg={stockStatus.variant}>{stockStatus.text}</Badge>
                    </td>
                    <td>
                      <div className="d-flex gap-2">
                        <Button
                          variant="outline-primary"
                          size="sm"
                          onClick={() => handleEdit(product)}
                        >
                          <i className="fas fa-edit"></i>
                        </Button>
                        <Button
                          variant="outline-danger"
                          size="sm"
                          onClick={() => handleDelete(product)}
                        >
                          <i className="fas fa-trash"></i>
                        </Button>
                      </div>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </Table>

          {paginatedProducts.length === 0 && filteredProducts.length === 0 && (
            <div className="text-center py-4">
              <i className="fas fa-box-open fa-3x text-muted mb-3"></i>
              <h5>No products found</h5>
              <p className="text-muted">
                {searchTerm || filterCategory !== 'all' || filterStock !== 'all' || priceRange.min || priceRange.max
                  ? 'No products match your search criteria' 
                  : 'Add your first product to get started'
                }
              </p>
              {(searchTerm || filterCategory !== 'all' || filterStock !== 'all' || priceRange.min || priceRange.max) && (
                <Button variant="outline-primary" onClick={clearAllFilters}>
                  <i className="fas fa-times me-2"></i>
                  Clear Filters
                </Button>
              )}
            </div>
          )}

          {/* Pagination */}
          {totalPages > 1 && (
            <div className="d-flex justify-content-between align-items-center mt-3">
              <div className="text-muted">
                Showing {Math.min((currentPage - 1) * itemsPerPage + 1, filteredProducts.length)} to{' '}
                {Math.min(currentPage * itemsPerPage, filteredProducts.length)} of {filteredProducts.length} products
              </div>
              <Pagination className="mb-0">
                <Pagination.First 
                  onClick={() => setCurrentPage(1)}
                  disabled={currentPage === 1}
                />
                <Pagination.Prev 
                  onClick={() => setCurrentPage(currentPage - 1)}
                  disabled={currentPage === 1}
                />
                
                {/* Page numbers */}
                {[...Array(Math.min(5, totalPages))].map((_, index) => {
                  let pageNum;
                  if (totalPages <= 5) {
                    pageNum = index + 1;
                  } else if (currentPage <= 3) {
                    pageNum = index + 1;
                  } else if (currentPage >= totalPages - 2) {
                    pageNum = totalPages - 4 + index;
                  } else {
                    pageNum = currentPage - 2 + index;
                  }
                  
                  return (
                    <Pagination.Item
                      key={pageNum}
                      active={pageNum === currentPage}
                      onClick={() => setCurrentPage(pageNum)}
                    >
                      {pageNum}
                    </Pagination.Item>
                  );
                })}
                
                <Pagination.Next 
                  onClick={() => setCurrentPage(currentPage + 1)}
                  disabled={currentPage === totalPages}
                />
                <Pagination.Last 
                  onClick={() => setCurrentPage(totalPages)}
                  disabled={currentPage === totalPages}
                />
              </Pagination>
            </div>
          )}
        </Card.Body>
      </Card>

      {/* Add/Edit Product Modal */}
      <Modal show={showModal} onHide={() => setShowModal(false)} size="lg">
        <Modal.Header closeButton>
          <Modal.Title>
            {editingProduct ? (
              <>
                <i className="fas fa-edit me-2"></i>
                Edit Product
              </>
            ) : (
              <>
                <i className="fas fa-plus me-2"></i>
                Add New Product
              </>
            )}
          </Modal.Title>
        </Modal.Header>
        <Form onSubmit={handleSubmit}>
          <Modal.Body>
            <Row>
              <Col md={8}>
                <Row>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>Product Name *</Form.Label>
                      <Form.Control
                        type="text"
                        name="name"
                        value={formData.name}
                        onChange={handleInputChange}
                        placeholder="Enter product name"
                        required
                      />
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>Category *</Form.Label>
                      <Form.Select
                        name="category"
                        value={formData.category}
                        onChange={handleInputChange}
                        required
                      >
                        <option value="">Select Category</option>
                        {categories.map(category => (
                          <option key={category.id} value={category.name}>
                            {category.name}
                          </option>
                        ))}
                      </Form.Select>
                    </Form.Group>
                  </Col>
                </Row>

                <Row>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>Price (₹) *</Form.Label>
                      <Form.Control
                        type="number"
                        name="price"
                        value={formData.price}
                        onChange={handleInputChange}
                        placeholder="0.00"
                        step="0.01"
                        min="0"
                        required
                      />
                    </Form.Group>
                  </Col>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>Original Price (₹)</Form.Label>
                      <Form.Control
                        type="number"
                        name="originalPrice"
                        value={formData.originalPrice}
                        onChange={handleInputChange}
                        placeholder="0.00"
                        step="0.01"
                        min="0"
                      />
                      <Form.Text className="text-muted">
                        Leave empty if no discount
                      </Form.Text>
                    </Form.Group>
                  </Col>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label>Stock Quantity *</Form.Label>
                      <Form.Control
                        type="number"
                        name="stock"
                        value={formData.stock}
                        onChange={handleInputChange}
                        placeholder="0"
                        min="0"
                        required
                      />
                    </Form.Group>
                  </Col>
                </Row>

                <Form.Group className="mb-3">
                  <Form.Label>Size/Weight *</Form.Label>
                  <Form.Control
                    type="text"
                    name="size"
                    value={formData.size}
                    onChange={handleInputChange}
                    placeholder="e.g., 1 kg, 500 ml, 250 g, Pack of 6"
                    required
                  />
                </Form.Group>

                <Form.Group className="mb-3">
                  <Form.Label>Product Image URL *</Form.Label>
                  <Form.Control
                    type="url"
                    name="image"
                    value={formData.image}
                    onChange={handleInputChange}
                    placeholder="https://example.com/image.jpg"
                    required
                  />
                  <Form.Text className="text-muted">
                    Enter a valid image URL
                  </Form.Text>
                </Form.Group>

                <Form.Group className="mb-3">
                  <Form.Label>Description</Form.Label>
                  <Form.Control
                    as="textarea"
                    rows={3}
                    name="description"
                    value={formData.description}
                    onChange={handleInputChange}
                    placeholder="Enter product description..."
                  />
                </Form.Group>
              </Col>
              
              {/* Image Preview Column */}
              <Col md={4}>
                <div className="text-center">
                  <Form.Label className="d-block">Preview</Form.Label>
                  {formData.image ? (
                    <div>
                      <img
                        src={formData.image}
                        alt="Product Preview"
                        className="img-fluid rounded border"
                        style={{ 
                          width: '100%', 
                          maxHeight: '200px', 
                          objectFit: 'cover',
                          backgroundColor: '#f8f9fa'
                        }}
                        onError={(e) => {
                          e.target.style.display = 'none';
                          e.target.nextElementSibling.style.display = 'block';
                        }}
                        onLoad={(e) => {
                          e.target.style.display = 'block';
                          e.target.nextElementSibling.style.display = 'none';
                        }}
                      />
                      <div 
                        className="border rounded p-4 text-muted" 
                        style={{ 
                          display: 'none',
                          height: '200px',
                          backgroundColor: '#f8f9fa'
                        }}
                      >
                        <i className="fas fa-image fa-2x mb-2"></i>
                        <br />
                        Image not found
                      </div>
                      
                      {/* Product Info Preview */}
                      <div className="mt-3 text-start">
                        <h6 className="mb-1">{formData.name || 'Product Name'}</h6>
                        <small className="text-muted d-block">{formData.size || 'Size/Weight'}</small>
                        <div className="mt-2">
                          {formData.price && (
                            <span className="fw-bold text-success">₹{formData.price}</span>
                          )}
                          {formData.originalPrice && parseFloat(formData.originalPrice) > parseFloat(formData.price || 0) && (
                            <>
                              <br />
                              <small className="text-muted text-decoration-line-through">
                                ₹{formData.originalPrice}
                              </small>
                              <Badge bg="success" className="ms-1 small">
                                {Math.round(((parseFloat(formData.originalPrice) - parseFloat(formData.price || 0)) / parseFloat(formData.originalPrice)) * 100)}% OFF
                              </Badge>
                            </>
                          )}
                        </div>
                        {formData.stock !== '' && (
                          <small className={`d-block mt-1 ${
                            parseInt(formData.stock) === 0 ? 'text-danger' : 
                            parseInt(formData.stock) <= 5 ? 'text-warning' : 'text-success'
                          }`}>
                            {parseInt(formData.stock) === 0 ? 'Out of Stock' : 
                             parseInt(formData.stock) <= 5 ? 'Low Stock' : 'In Stock'}
                            {formData.stock && ` (${formData.stock} units)`}
                          </small>
                        )}
                      </div>
                    </div>
                  ) : (
                    <div 
                      className="border rounded p-4 text-muted" 
                      style={{ 
                        height: '200px',
                        backgroundColor: '#f8f9fa',
                        display: 'flex',
                        flexDirection: 'column',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}
                    >
                      <i className="fas fa-image fa-3x mb-2"></i>
                      <span>Image Preview</span>
                      <small>Enter image URL to preview</small>
                    </div>
                  )}
                </div>
              </Col>
            </Row>
          </Modal.Body>
          <Modal.Footer>
            <Button variant="outline-secondary" onClick={() => setShowModal(false)}>
              <i className="fas fa-times me-2"></i>
              Cancel
            </Button>
            <Button type="submit" variant="primary" disabled={loading}>
              {loading ? (
                <>
                  <span className="spinner-border spinner-border-sm me-2"></span>
                  Saving...
                </>
              ) : (
                <>
                  <i className={`fas fa-${editingProduct ? 'save' : 'plus'} me-2`}></i>
                  {editingProduct ? 'Update Product' : 'Add Product'}
                </>
              )}
            </Button>
          </Modal.Footer>
        </Form>
      </Modal>

      {/* Delete Confirmation Modal */}
      <Modal show={showDeleteModal} onHide={() => setShowDeleteModal(false)} centered>
        <Modal.Header closeButton>
          <Modal.Title className="text-danger">
            <i className="fas fa-exclamation-triangle me-2"></i>
            Confirm Delete
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {deletingProduct && (
            <div>
              <p className="mb-3">
                Are you sure you want to delete this product? This action cannot be undone.
              </p>
              
              <div className="bg-light p-3 rounded">
                <div className="d-flex align-items-center">
                  <img
                    src={deletingProduct.image}
                    alt={deletingProduct.name}
                    className="rounded me-3"
                    style={{ width: '60px', height: '60px', objectFit: 'cover' }}
                    onError={(e) => {
                      e.target.style.display = 'none';
                      e.target.nextElementSibling.style.display = 'inline-block';
                    }}
                  />
                  <i 
                    className="fas fa-image text-muted" 
                    style={{ 
                      display: 'none',
                      width: '60px',
                      height: '60px',
                      lineHeight: '60px',
                      textAlign: 'center',
                      backgroundColor: '#f8f9fa',
                      border: '1px solid #dee2e6',
                      borderRadius: '0.375rem'
                    }}
                  ></i>
                  <div>
                    <h6 className="mb-1">{deletingProduct.name}</h6>
                    <small className="text-muted">
                      {deletingProduct.category} • {deletingProduct.size}
                    </small>
                    <br />
                    <small className="text-muted">
                      Price: ₹{deletingProduct.price} • Stock: {deletingProduct.stock} units
                    </small>
                  </div>
                </div>
              </div>
            </div>
          )}
        </Modal.Body>
        <Modal.Footer>
          <Button 
            variant="outline-secondary" 
            onClick={() => setShowDeleteModal(false)}
            disabled={loading}
          >
            <i className="fas fa-times me-2"></i>
            Cancel
          </Button>
          <Button 
            variant="danger" 
            onClick={confirmDelete}
            disabled={loading}
          >
            {loading ? (
              <>
                <span className="spinner-border spinner-border-sm me-2"></span>
                Deleting...
              </>
            ) : (
              <>
                <i className="fas fa-trash me-2"></i>
                Delete Product
              </>
            )}
          </Button>
        </Modal.Footer>
      </Modal>
    </>
  );
};

export default ProductManagement;